{"ast":null,"code":"var _jsxFileName = \"/Users/alexistercero/Desktop/react-udemy/04-CRYPTO/crypto-price-quote/src/hooks/useCriptomoneda.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from 'react';\nimport styled from \"@emotion/styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useCriptomoneda = (label, stateInicial, opciones) => {\n  _s();\n\n  //State de nuestro custom hook\n  const [state, actualizarState] = useState(stateInicial);\n\n  const SelectCripto = () => /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Label, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      onChange: e => actualizarState(e.target.value),\n      value: state,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \" Cryptocurrencies \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), opciones.map(opcion => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: opcion.CoinInfo.Name,\n        children: opcion.CoinInfo.FullName\n      }, opcion.CoinInfo.Id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this); //Retornar state, interfaz y funcion que modifica el state.\n\n\n  return [state, SelectCripto, actualizarState];\n};\n\n_s(useCriptomoneda, \"1776uhJgKLksmDNg8QZIgfuVZfc=\");\n\nexport default useCriptomoneda;\nconst Label = styled.label`\n    font-family: Arial, Helvetica, sans-serif;\n    color: grey;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display: block;\n`;\n_c = Label;\nconst Select = styled.select`\n    width: 100%;\n    display: block;\n    padding: 1rem;\n    --webkit-appearance: none;\n    border: 1px solid rgba(49, 216, 255, 0.9);\n    font-size: 1.1rem;\n    font-weight: 100 ;\n    color: white;\n    background-color: transparent;\n    \n\n    &:focus-visible{\n        outline:0.3px solid blue;\n    }\n    \n`;\n_c2 = Select;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Label\");\n$RefreshReg$(_c2, \"Select\");","map":{"version":3,"sources":["/Users/alexistercero/Desktop/react-udemy/04-CRYPTO/crypto-price-quote/src/hooks/useCriptomoneda.js"],"names":["React","Fragment","useState","styled","useCriptomoneda","label","stateInicial","opciones","state","actualizarState","SelectCripto","e","target","value","map","opcion","CoinInfo","Name","FullName","Id","Label","Select","select"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;;AAGA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,YAAR,EAAsBC,QAAtB,KAAmC;AAAA;;AACvD;AACA,QAAM,CAACC,KAAD,EAAQC,eAAR,IAA2BP,QAAQ,CAACI,YAAD,CAAzC;;AAEA,QAAMI,YAAY,GAAG,mBACjB,QAAC,QAAD;AAAA,4BACG,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YADH,eAEI,QAAC,MAAD;AACI,MAAA,QAAQ,EAAGC,CAAC,IAAIF,eAAe,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CADnC;AAEI,MAAA,KAAK,EAAEL,KAFX;AAAA,8BAII;AAAQ,QAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,EAKKD,QAAQ,CAACO,GAAT,CAAaC,MAAM,iBAChB;AAAiC,QAAA,KAAK,EAAEA,MAAM,CAACC,QAAP,CAAgBC,IAAxD;AAAA,kBAA+DF,MAAM,CAACC,QAAP,CAAgBE;AAA/E,SAAaH,MAAM,CAACC,QAAP,CAAgBG,EAA7B;AAAA;AAAA;AAAA;AAAA,cADH,CALL;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAJuD,CAkBvD;;;AACA,SAAO,CAACX,KAAD,EAAQE,YAAR,EAAsBD,eAAtB,CAAP;AACH,CApBD;;GAAML,e;;AAsBN,eAAeA,eAAf;AAEA,MAAMgB,KAAK,GAAGjB,MAAM,CAACE,KAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;KAAMe,K;AAUN,MAAMC,MAAM,GAAGlB,MAAM,CAACmB,MAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBA;MAAMD,M","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport styled from \"@emotion/styled\";\n\n\nconst useCriptomoneda = (label, stateInicial, opciones) => {\n    //State de nuestro custom hook\n    const [state, actualizarState] = useState(stateInicial);\n\n    const SelectCripto = () => (\n        <Fragment>\n           <Label>{}</Label> \n            <Select\n                onChange={ e => actualizarState(e.target.value)}\n                value={state}\n            >\n                <option value=\"\"> Cryptocurrencies </option>\n                {opciones.map(opcion => (\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\n                ))}\n            </Select> \n        </Fragment>\n    );\n    //Retornar state, interfaz y funcion que modifica el state.\n    return [state, SelectCripto, actualizarState]\n}\n\nexport default useCriptomoneda;\n\nconst Label = styled.label`\n    font-family: Arial, Helvetica, sans-serif;\n    color: grey;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display: block;\n`\n\nconst Select = styled.select`\n    width: 100%;\n    display: block;\n    padding: 1rem;\n    --webkit-appearance: none;\n    border: 1px solid rgba(49, 216, 255, 0.9);\n    font-size: 1.1rem;\n    font-weight: 100 ;\n    color: white;\n    background-color: transparent;\n    \n\n    &:focus-visible{\n        outline:0.3px solid blue;\n    }\n    \n`"]},"metadata":{},"sourceType":"module"}